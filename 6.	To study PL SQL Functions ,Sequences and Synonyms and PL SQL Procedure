Function: A PL/SQL block that returns a single value.

Procedure: A PL/SQL block that performs an operation and may return values using OUT parameters.

Sequence: Generates auto-increment values.

Synonym: Provides an alternate name for database objects.

✅ Table Creation
CREATE TABLE employee(
    emp_id NUMBER PRIMARY KEY,
    emp_name VARCHAR2(30),
    salary NUMBER
);

✅ Create Sequence
CREATE SEQUENCE emp_seq
START WITH 1
INCREMENT BY 1;

✅ Insert Data Using Sequence
INSERT INTO employee VALUES(emp_seq.NEXTVAL, 'Rohit', 50000);
INSERT INTO employee VALUES(emp_seq.NEXTVAL, 'Priya', 60000);
INSERT INTO employee VALUES(emp_seq.NEXTVAL, 'Amit', 45000);

✅ Create Function (to return employee salary)
CREATE OR REPLACE FUNCTION getSalary(eid NUMBER)
RETURN NUMBER
IS
    sal NUMBER;
BEGIN
    SELECT salary INTO sal
    FROM employee
    WHERE emp_id = eid;

    RETURN sal;
END;
/

Execute Function
SELECT getSalary(1) FROM dual;

✅ Create Procedure (to display employee info)
CREATE OR REPLACE PROCEDURE showEmployee(eid NUMBER)
IS
    name employee.emp_name%TYPE;
    sal employee.salary%TYPE;
BEGIN
    SELECT emp_name, salary INTO name, sal
    FROM employee
    WHERE emp_id = eid;

    DBMS_OUTPUT.PUT_LINE('Employee Name: ' || name);
    DBMS_OUTPUT.PUT_LINE('Employee Salary: ' || sal);
END;
/

Execute Procedure
SET SERVEROUTPUT ON;
BEGIN
    showEmployee(2);
END;
/

✅ Create Synonym
CREATE SYNONYM emp FOR employee;

Use Synonym
SELECT * FROM emp;

✅ Output
Table Data
EMP_ID	EMP_NAME	SALARY
1	Rohit	50000
2	Priya	60000
3	Amit	45000
Function Output
GETSALARY(1)
------------
50000

Procedure Output
Employee Name: Priya
Employee Salary: 60000

Synonym Output
1  Rohit  50000
2  Priya  60000
3  Amit   45000
